Tyler Filla
CS 4760
Assignment 6

Information
===========

This project simulates the second-chance paging algorithm with a number of actual processes. The simulated operating
system environment does not perform scheduling, instead relying on actual OS facilities in this regard.

Two programs, oss and child, comprise the system. OS duties are, for the sake of the simulation, split between oss and
child; however, a designated area exists in child to represent user mode operations. Suspension, for instance, is
simulated in the child program so as not to block oss. If scheduling were simulated, I could have done this.

Since the simulated processes don't have a page table base register, I map the processes' pids to page tables in an
array in shared memory. Every memory reference involves looking up the process's page table. A special type, ptr_vm_t,
is used to represent "pointers" to simulated addresses in child process's virtual memory address spaces.

There is no queue structure for the simulated memory backing store device. Instead, since each process can only wait on
one page at a time, wait parameters are stored on a per-process basis. oss will periodically "fulfill" the I/O requests
of those processes whose wait times expire (by the logical clock). This has the same effect.

Directory Structure
===================

Project Root
 |
 +-- child.c        (the main file for the child program)
 |
 +-- clock.c        (the main file for the clock library)
 |
 +-- clock.h        (the corresponding header file for clock.c)
 |
 +-- config.h       (a header file with global configuration settings)
 |
 +-- Makefile
 |
 +-- oss.c          (the main file for the oss program)
 |
 +-- memmgr.c       (the main file for the memory manager library)
 |
 +-- memmgr.h       (the corresponding header file for memmgr.c)
 |
 +-- README

Building
========

To build, run the following command:

$ make

Usage
=====

At any time, run the following command for help:

$ ./oss -h

The program will run with the assigned defaults if you run the following:

$ ./oss

To run in verbose mode to see what is happening internally, use -v:

$ ./oss -v

Interrupt the process with ^C on a terminal to stop the simulation.

Cleanup
=======

To clean up after a build, use the following command:

$ make clean
